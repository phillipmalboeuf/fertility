---
import { client } from '@/clients/contentful'
import type { TypePageSkeleton, TypeNavigationSkeleton } from '@/content_types'

import Page from '@/components/Page.astro';
import Layout from '@/layouts/Layout.astro';
import Menu from '@/components/Menu.astro';

// export async function getStaticPaths() {
//   const entries = await client.getEntries<TypePageSkeleton, "WITHOUT_UNRESOLVABLE_LINKS">({
//     content_type: "page",
//     select: ['fields.id']
//   })

//   return entries.items.map(page => ({ params: { id: page.fields.id } }))
// }

const { id } = Astro.params;
const [page, navigation, sideNavigation, bottomNavigation] = await Promise.all([
	(await client.getEntries<TypePageSkeleton, "WITHOUT_UNRESOLVABLE_LINKS">({
    content_type: "page",
    "fields.id": id,
    include: 4,
  })).items[0],
	(await client.getEntries<TypeNavigationSkeleton, "WITHOUT_UNRESOLVABLE_LINKS">({
		content_type: "navigation",
		"fields.id": "navigation",
	})).items[0],
	(await client.getEntries<TypeNavigationSkeleton, "WITHOUT_UNRESOLVABLE_LINKS">({
		content_type: "navigation",
		"fields.id": "sidebar",
	})).items[0],
	(await client.getEntries<TypeNavigationSkeleton, "WITHOUT_UNRESOLVABLE_LINKS">({
		content_type: "navigation",
		"fields.id": "contact",
	})).items[0],
])

let counter = Astro.cookies.has("counter") ? Astro.cookies.get("counter").number() : 0
const color = navigation.fields.links.find(link => link.fields.destination === `/${page.fields.id}`)?.fields.color
---


<Layout title={page.fields.title}>
  <Menu title={page.fields.title} {color} {navigation} />
  <main>
    <Page {page} {navigation} {sideNavigation} {color} {counter} bottomNavigation={!["home"].includes(page.fields.id) ? bottomNavigation : undefined} />
  </main>
</Layout>
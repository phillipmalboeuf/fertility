---
import type { Entry } from 'contentful'
import { documentToHtmlString } from "@contentful/rich-text-html-renderer"
import type { EntryFieldTypes } from "contentful"
import type { TypePageSkeleton, TypeNavigationSkeleton, TypeTextSkeleton } from '@/content_types'
import Content from './Content.astro'
import { map } from 'astro/zod'

interface Props {
  item: Entry<TypeTextSkeleton, "WITHOUT_UNRESOLVABLE_LINKS">
}
const { item } = Astro.props;
---

<details id={item.fields.id} open={!item.fields.collapsable}>
  <summary class:list={{ rounded: item.fields.rounded }}>
    {item.fields.title?.split('|').map(t => t === '' ? <h2></h2> : <h2><span>{t}</span></h2>)}
    {item.fields.collapsable && <>
    <svg class="plus" xmlns="http://www.w3.org/2000/svg" width="21" height="21" viewBox="0 0 21 21" fill="none">
      <rect x="0.157715" y="7.74622" width="20.2969" height="5.36" rx="2.68" fill="currentColor"/>
      <rect x="12.9858" y="0.277832" width="20.2969" height="5.36" rx="2.68" transform="rotate(90 12.9858 0.277832)" fill="currentColor"/>
    </svg>
    <svg class="minus" xmlns="http://www.w3.org/2000/svg" width="21" height="6" viewBox="0 0 21 6" fill="none">
      <rect x="0.0224609" y="0.319946" width="20.2969" height="5.36" rx="2.68" fill="currentColor"/>
    </svg>
    </>}
  </summary>
  <section>
    <Fragment set:html={documentToHtmlString(item.fields.body)} />
    
    {item.fields.more && <div><Content content={item.fields.more} /></div>}
  </section>
</details>

<style lang="scss">
  details {
    summary {
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: space-between;

      padding: $base;
      color: white;
      background-color: var(--color);
      margin-bottom: 1px;

      &.rounded {
        color: var(--color);
        background-color: transparent;
        border: none !important;
        margin-bottom: $base;
        padding: 0;

        svg {
          display: none !important;
        }

        h2 {
          position: relative;
          display: block;
          flex: 1;
          text-align: center;
          border: 2px solid;
          border-radius: $base * 3;
          padding: $base;

          &:empty {
            border: none;
          }

          + h2 {
            margin-left: $base * -0.5;
          }

          > span {
            position: relative;
            z-index: 1;
          }

          &:before {
            content: "";
            position: absolute;
            background-color: white;
            inset: -2px;
            left: $base * 2;
            right: $base * 2;
            z-index: 0;
          }
        }

        
      }

      .minus {
        display: none;
      }
    }

    details summary {
      color: var(--color);
      background-color: transparent;
      padding-left: 0;
      border-bottom: 1px solid;
    }

    summary::-webkit-details-marker,
    summary::marker {
      display: none;
      content: "";
    }

    &[open] > summary {
      margin-bottom: $base;

      .minus {
        display: inline-block;
      }

      .plus {
        display: none;
      }
    }

    section {
      display: flex;
      flex-direction: column;
      gap: $base;

      max-width: $base * 36;
      margin: ($base * 3) auto ($base * 6);

      :global(h5),
      :global(h6) {
        text-align: center;
      }

      :global(i) {
        font-family: $display;
        font-style: normal;
        font-weight: 500;
	      letter-spacing: -0.005em;
      }
    }
  }
</style>